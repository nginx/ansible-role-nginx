---
- name: "(Install: Linux) Install PCRE Dependency"
  block:

  - name: "(Install: Linux) Install PCRE Dependency: Download"
    get_url:
      url: "https://ftp.pcre.org/pub/pcre/{{ pcre_version }}.tar.gz"
      dest: "/tmp/{{ pcre_version }}.tar.gz"
    register: pcre_source

  - name: "(Install: Linux) Install PCRE Dependency: Unpack"
    unarchive:
      copy: no
      dest: /tmp/
      src: "{{ pcre_source.dest }}"
    register: pcre_source_unpack

  - name: "(Install: Linux) Install PCRE Dependency: Configure"
    command: "./configure"
    args:
      chdir: "/tmp/{{ pcre_version }}"
    register: pcre_configure

  - name: "(Install: Linux) Install PCRE Dependency: Install"
    make:
      chdir: "/tmp/{{ pcre_version }}"

  - name: "(Install: Linux) Install PCRE Dependency: Install"
    make:
      chdir: "/tmp/{{ pcre_version }}"
      target: install
    become: yes

- name: "(Install: Linux) Install zlib Dependency"
  block:

    - name: "(Install: Linux) Install zlib Dependency: Download"
      get_url:
        url: "http://zlib.net/{{ zlib_version }}.tar.gz"
        dest: "/tmp/{{ zlib_version }}.tar.gz"
      register: zlib_source

    - name: "(Install: Linux) Install zlib Dependency: Unpack"
      unarchive:
        copy: no
        dest: /tmp/
        src: "{{ zlib_source.dest }}"
      register: zlib_source_unpack

    - name: "(Install: Linux) Install zlib Dependency: Configure"
      command: "./configure"
      args:
        chdir: "/tmp/{{ zlib_version }}"
      register: zlib_configure

    - name: "(Install: Linux) Install zlib Dependency: Install"
      make:
        chdir: "/tmp/{{ zlib_version }}"

    - name: "(Install: Linux) Install zlib Dependency: Install"
      make:
        chdir: "/tmp/{{ zlib_version }}"
        target: install
      become: yes

- name: "(Install: Linux) Install OpenSSL Dependency"
  block:

    - name: "(Install: Linux) Install OpenSSL Dependency: Download"
      get_url:
        url: "http://www.openssl.org/source/{{ openssl_version }}.tar.gz"
        dest: "/tmp/{{ openssl_version }}.tar.gz"
      register: openssl_source

    - name: "(Install: Linux) Install OpenSSL Dependency: Unpack"
      unarchive:
        copy: no
        dest: /tmp/
        src: "{{ openssl_source.dest }}"
      register: openssl_source_unpack

    - name: "(Install: Linux) Install OpenSSL Dependency: Configure"
      command: "./config --prefix=/usr"
      args:
        chdir: "/tmp/{{ openssl_version }}"
      register: openssl_configure

    - name: "(Install: Linux) Install OpenSSL Dependency: Make"
      make:
        chdir: "/tmp/{{ openssl_version }}"

    - name: "(Install: Linux) Install OpenSSL Dependency: Install"
      make:
        chdir: "/tmp/{{ openssl_version }}"
        target: install
      become: yes

- name: "(Install: Linux) Install NGINX"
  block:

    - name: "(Install: Linux) Install NGINX: Get NGINX mainline version"
      shell:
      args:
        cmd: curl --stderr - https://trac.nginx.org/nginx/browser | grep release | head -1 | sed -e 's:.*<option value="[^"]*">release\([^<]*\)<.*:nginx\1:'  # noqa 204 303
      register: nginx_mainline_version
      when: nginx_branch == "mainline"

    - name: "(Install: Linux) Install NGINX: Set NGINX mainline version"
      set_fact:
        nginx_version: "{{ nginx_mainline_version.stdout }}"
      when: nginx_branch == "mainline"

    - name: "(Install: Linux) Install NGINX: Get NGINX stable version 1/2"
      shell:
      args:
        cmd: curl --stderr - https://trac.nginx.org/nginx/browser | grep stable | head -1 | sed -e 's:.*<option value="[^"]*">stable\([^<]*\)<.*:release\1:'  # noqa 204 303
      register: nginx_tmp_version
      when: nginx_branch == "stable"

    - name: "(Install: Linux) Install NGINX: Get NGINX stable version 2/2"
      shell:
      args:
        cmd: curl --stderr - https://trac.nginx.org/nginx/browser | grep {{ nginx_tmp_version.stdout }} | head -1 | sed -e 's:.*<option value="[^"]*">release\([^<]*\)<.*:nginx\1:'  # noqa 204 303
      register: nginx_stable_version
      when: nginx_branch == "stable"

    - name: "(Install: Linux) Install NGINX: Set NGINX stable version"
      set_fact:
        nginx_version: "{{ nginx_stable_version.stdout }}"
      when: nginx_branch == "stable"

    - name: "(Install: Linux) Install NGINX: Set NGINX download filename"
      set_fact:
        nginx_download_name: "{{ nginx_version }}"
      when: nginx_branch == "stable" or nginx_branch == "mainline"

    - name: "(Install: Linux) Install NGINX: Download"
      get_url:
        url: "https://nginx.org/download/{{ nginx_download_name }}.tar.gz"
        dest: "/tmp/{{ nginx_download_name }}.tar.gz"
      register: nginx_source

    - name: "(Install: Linux) Install NGINX: Unpack"
      unarchive:
        copy: no
        dest: /tmp/
        src: "{{ nginx_source.dest }}"
      register: nginx_source_unpack

    - name: "(Install: Linux) Install NGINX: Configure"
      command: "./configure --prefix=/usr --pid-path=/var/run/nginx.pid --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http
-log-path=/var/log/nginx/access.log --lock-path=/var/lock/nginx.lock --modules-path=/usr/lib/nginx/modules"  # noqa 204
      args:
        chdir: "/tmp/{{ nginx_version }}"
      register: nginx_configure

    - name: "(Install: Linux) Install NGINX: Make"
      make:
        chdir: "/tmp/{{ nginx_version }}"

    - name: "(Install: Linux) Install NGINX: Install"
      make:
        chdir: "/tmp/{{ nginx_version }}"
        target: install
      become: yes

    - name: "(Install: Linux) Upload systemd NGINX debug service file"
      copy:
        src: services/systemd/nginx-debug.service
        dest: /lib/systemd/system/nginx-debug.service
        owner: root
        group: root
        mode: '0644'
      when: ansible_os_family == "RedHat" or ansible_os_family == "Debian"

    - name: "(Install: Linux) Upload systemd NGINX service file"
      copy:
        src: services/systemd/nginx.service
        dest: /lib/systemd/system/nginx.service
        owner: root
        group: root
        mode: '0644'
      notify: "(Handler: Debian/Ubuntu/CentOS/RedHat) Reload systemd"
      when: ansible_os_family == "RedHat" or ansible_os_family == "Debian"

    - name: "(Install: Linux) Enable systemd NGINX service file"
      systemd:
        name: nginx
        state: started
        enabled: yes
      when: ansible_os_family == "RedHat" or ansible_os_family == "Debian"

    - name: "(Install: Linux) Upload init.d NGINX debug service file"
      copy:
        src: services/init.d/nginx-debug
        dest: /etc/init.d/nginx-debug
        owner: root
        group: root
        mode: '0755'
      when: ansible_os_family == "Alpine"

    - name: "(Install: Linux) Upload init.d NGINX service file"
      copy:
        src: services/init.d/nginx
        dest: /etc/init.d/nginx
        owner: root
        group: root
        mode: '0755'
      when: ansible_os_family == "Alpine"

    - name: "(Install: Linux) Enable init.d NGINX service"
      command: rc-update add nginx default
      notify: "(Handler: Alpine) Reload init.d"
      when: ansible_os_family == "Alpine"

    - name: "(Install: Linux) Install NGINX: Cleanup Downloads"
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ pcre_source.dest }}"
        - "{{ zlib_source.dest }}"
        - "{{ openssl_source.dest }}"
        - "{{ nginx_source.dest }}"
